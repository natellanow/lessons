package gitCommands;

public class commands {
    /*
    GIT - распределённая система контроля версий (у каждого разработчика есть своя копия проекта + история его изменений), которая даёт возможность разработчикам:
отслеживать и фиксировать изменения в файлах
возвращаться к зафиксированным изменениям
синхронизироваться с удаленными репозиториями
работать с ветками
Первоначальная настройка GIT
выполняется после того, как git был установлен на компьютер или при необходимости внести изменения

Установить/изменить имя пользователя

git config --global user.name "Ваше Имя"
Установить/изменить email пользователя

git config --global user.email ваша@почта.com
Посмотреть значения

git config --global user.name
git config --global user.email
Аргументы:

--global (для текущего пользователя)
--system (для всех пользователей)
без аргумента (на конкретный проект)
Репозиторий — набор файлов, находящихся под контролем версий git, вместе с историей их изменений и другой служебной информацией.

Способы получения GIT-репозитория
Превратить каталог, который не находится под версионным контролем, в репозиторий Git

git init
команда создаёт в текущем каталоге новый подкаталог с именем .git, содержащий все необходимые файлы репозитория

Клонировать существующий репозиторий Git

git clone ссылка-на-репозиторий, например git clone https://github.com/jjd-lessons/lessons.git
git clone ссылка-на-репозиторий новое-имя-каталога
команда создаёт каталог, инициализирует в нём подкаталог .git, скачивает все данные для этого репозитория и извлекает копию последней версии

Файл .gitignore
Имена файлов / папок, которые не должны попадать под версионный контроль необходимо поместить в .gitignore файл

Проверить текущее состояние репозитория
git status
Три основных состояния Git, в которых могут находиться файлы:
изменён (modified) - измененные, но не проиндексированные (не подготовленные к сохранению);
индексирован (staged) - проиндексированные (готовые к сохранению), но не сохраненные;
зафиксирован (committed) - сохраненный.
Базовый подход в работе с Git:
Изменения файлов;
Добавление в индекс файлов, которые должны попасть в следующий коммит (изменения в этих файлах будут сохранены);
Коммит (фиксация изменений), снимок сохраняется в каталог Git (сохранение состояния проекта).
Индекс (область индексирования) - это файл, обычно находящийся в каталоге Git, в нём содержится информация о том, что попадёт в следующий коммит

Добавление файлов под версионный контроль / Индексация изменённых файлов
git add имя_файла - добавление одного файла
git add имя_папки/ - добавление папки со всем ее содержимым
git add * - добавит все новые  / измененные файлы
Удаление файлов из индекса
git rm --cached имя_файла - удаление только из индекса
git rm -f имя_файла - удаление из индекса и из проекта
Фиксация изменений (сохранение состояния) В коммит попадут (будут сохранены) только файлы, которые были проиндексированы командой git add
git commit -m "сообщение коммита"
git commit -a "сообщение коммита" - аналогично командам (git add * + git commit -m "сообщение коммита")

git commit --amend - изменить сообщение последнего коммита (через консольный редактор)
git commit --amend -m "сообщение коммита" - объединение нового коммита с последним и создание нового сообщения к коммиту
git commit --amend --no-edit - объединение нового коммита с последним без формирование нового сообщения к коммиту
Просмотр истории коммитов
git log
ССЫЛКА: Дополнительная информация о просмотре истории коммитов

Информация о коммите (метаданные):
уникальный идентификатор коммита (хеш);
имя и email автора коммита;
дата создания коммита;
комментарий к коммиту.
Скрытие (прятание) изменений (проект возвращается в состояние последнего коммита)
git stash - скрытие (прятание)
git stash list - выводит список всех прятаний
git stash apply - вернуть последнее прятание
git stash apply индекс, например  git stash apply stash@{1} - вернуть прятание по индексу
git stash clear - удалить все прятанья
Работа с удаленными репозиториями
Добавление (удаление) удалённых репозиториев:
git remote add <имя> <url>, например git remote add origin https://github.com/java-junior-developer/java-junior-developer.git добавление
git remote remove <имя>, например git remote remove origin удаление
Отправка изменений в удаленный репозиторий:
git push
git push <имя_удаленного_репозитория> <имя_ветки>, например git push origin master
Получение изменений из удалённого репозитория:
данную команду принято также выполнять каждый раз перед оправкой изменений в удаленный репозиторий

git pull
Удаление файлов из удаленного репозитория:
Когда появляется необходимость удалить файлы из удаленного, но не локального репозитория необходимо последовательно выполнить следующие команды:

git rm -r --cached имя-файла или папки
Можно добавить названия файлов или папок в .gitignore, чтобы git игнорировал их
Выполнить commit
Выполнить push
После этого все перечисленные файлы будут удалены из удаленного репозитория, но сохранятся в локальном.
     */
}
